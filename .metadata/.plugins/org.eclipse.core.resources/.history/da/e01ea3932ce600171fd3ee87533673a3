package fr.m2i.etudesjava;

import java.util.*;

/*
 * Collectiion : terme générique qui définit globalement les classes implémentant 
 * les interfaces Map, Collection, Set ou List
 * 
 * Les interfaces Set et List sont des sous-interfaces de collection
 * L'interface Collection hérite de l'interface Iterable
 * 
 * L'interface Iterable 
 * ----------------------
 * Elle contient la méthode Iterator() qui retourne qui retourne un objet de type Iterator 
 * 
 * L'interface Iterator conteint 3 méthodes : 
 * - next() 
 * 		|-> permet de passer d'un élément au suivant
 * - hasNext() 
 * 		|-> permet de savoir si un élément a un suivant
 * - remove()
 * 		|-> permet de supprimer un élément
 * 
 * L'interface Map
 * ----------------------
 * Une interface Map est implémentée par des containers associatifs 
 * Container associatif : container qui associe une valeur à une clé
 * 
 * La clé est unique mais la valeur ne l'est pas forcement (on peut trouver la même valeur associée à
 * plusieurs clés)
 * 
 * L'accès en lecture ou écriture à une valeur se fait à l'aide de sa clé.
 * 
 * Les méthodes les plus importantes : 
 * - containsKey(Obj key) -> test la présence d'une clé 
 * - containsValue(Obj value  - test la présece d'une valeur
 * - get(Obj key) - recupére la valeur associé à une clé 
 * - put(K key, V value) - ajoute un binome clé/valeur dans la map
 * - remove() -> supprime un binome clé/valeur
 * - keySet -> retourne ttes les clés 
 * - values -> retourne toutes les valeur 
 * - size() -> retourne le nombre de binome clé/valeur 
 * 
 *  Exemple de classes qui implémentes Map:
 *  - HashTable 
 *  	- n'accepte ppas de clé null
 *  	- n'est pas thread safe
 *  - HashMap 
 *  	- accepte une clé null 
 *  	- est thread safe
 *  - TreeMap
 *  	- n'est pas thread safe
 *  	- n'accepte pas une clé null
 *  
 *  Interface Collection 
 *  -----------------------
 *  Méthodes Importantes : 
 *  - size() : retourn le nombre d'objets stockés
 *  - add(E,e) : ajoute un objet
 *  - remove(Obj o) : supprime un objet
 *  - contains(Object 0) : teste si un certain élément existe
 *  - clear() : vide la collection
 *  - iterator : retourne un objet de type Iterator
 *  
 *  Interface Set
 *  -----------------------
 *  Cette interface est implémentée par les conteneurs qui n'autorisent pas les 
 *  doublons
 *  la valeur null peut être acceptée mais une seule fois
 *  
 *  cette interface ne propose ni un accès indexé, ni un accès basé sur cette
 *  clé, donc le seul moyen de parcourir une collection qui implèmente Set est d'utiliser 
 *  un Iterator
 *  
 *  L'implémentation la plus connue de l'interface Set est la classe HashSet
 *  
 *  L'interface List
 *  ------------------------
 *  Cette interface permet un accès indexé aux éléements de la collection (en plus 
 *  de l'accès par l'iterator)
 *  
 *  Les classes les plus connues qui implémentent cette interface sont : 
 *  - ArrayList : c'est l'équivalent d'un tableau dynamique (qui augmente automatiquement
 *  sa taille au fur et à mesure des insertions)
 *  - LinkedList : c'est une liste chainée 
 * 
 */

public class Main {

	public static void main(String[] args) {
		Personne p = new Personne("Mitterrand", "François", Personne.M);
		Automobile a1 = new Automobile("Porsche", "argent", 200000);
		Automobile a2 = new Automobile("Bugatti", "Noir", 1000000);

		ArrayList<Object> al = new ArrayList<>();
		// toutes les collections ne contiennent que des objects
		// les valeurs numérique (comme 100 par exemple) ne peuvent pas 
		// être stockés directement dans une collection
		// Une telle valeur doit être "enveloppée" dans une couche objet : 
		al.add(new Integer(100));
		/*
		 * Depuis java 1.5, le compilateur Java assure cette transformation
		 * d'une valeur en objet contenant la valeur automatiquement
		 * On appelle cela 'autoboxing' (mise en boite)
		 */
		al.add(200);
		al.add(p);
		al.add(a1);
		al.add(a2);
		
		// récuperer les objects stockés 
		
		/*
		 * utiliser l'accès indexé (permis par les conteneurs implémentants 
		 * l'interface List)
		 */
		int i = 0;
		for(Object el : al)
		{
			System.out.println("Position : " + i +" - Type object : " + el.getClass().getSimpleName() +"\n\t" + el.toString());
			i++;
		}
	}

}
















